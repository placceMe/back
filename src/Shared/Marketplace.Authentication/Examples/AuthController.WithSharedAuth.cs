using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Authorization;
using UsersService.Services;
using UsersService.DTOs;
using UsersService.Repositories;
using System.Security.Claims;

// ?????????????? shared authentication
using Marketplace.Authentication.Abstractions;
using Marketplace.Authentication.Models;

namespace UsersService.Controllers;

/// <summary>
/// ????????????: ?? ??????? AuthController ??? ???????????? shared authentication library
/// ?????????? HttpOnly cookies ?? ?????????? ? Redis ??? ?????????? ???????
/// </summary>
[ApiController]
[Route("api/[controller]")]
public class AuthControllerWithSharedAuth : ControllerBase
{
    private readonly IUserService _usersService;
    private readonly IUserRepository _userRepository;
    private readonly ISessionManager _sessionManager;
    private readonly ILogger<AuthControllerWithSharedAuth> _logger;

    public AuthControllerWithSharedAuth(
        IUserService usersService, 
        IUserRepository userRepository,
        ISessionManager sessionManager,
        ILogger<AuthControllerWithSharedAuth> logger)
    {
        _usersService = usersService;
        _userRepository = userRepository;
        _sessionManager = sessionManager;
        _logger = logger;
    }

    /// <summary>
    /// ????????? LOGIN ? ????????????? shared authentication library
    /// ??????? ????? ? Redis ??????? ???????? JWT ??????
    /// </summary>
    [HttpPost("login")]
    public async Task<ActionResult<AuthResponse>> Login([FromBody] LoginRequest request)
    {
        var result = await _usersService.LoginAsync(request);

        if (result.Success && result.User != null)
        {
            var userEntity = await _userRepository.GetByEmailAsync(request.Email);
            if (userEntity != null)
            {
                // ??????????? ?????? ???????????
                if (userEntity.State != "Active")
                {
                    _logger.LogWarning("?????? ??????????? ??????????? ? ?????????? ????????: {Email}, ??????: {State}", request.Email, userEntity.State);
                    return BadRequest(new AuthResponse
                    {
                        Success = false,
                        Message = userEntity.State == "Pending" ? "???? ?????, ????????? ???? ????????? ????? ????? ?????????? ?????" : "????????? ????? ???????????"
                    });
                }

                // ?? ????: ????????? ????? ????? shared library ??????? ???????? JWT
                var sessionRequest = new CreateSessionRequest
                {
                    UserId = userEntity.Id,
                    UserEmail = userEntity.Email,
                    UserName = userEntity.Name,
                    Roles = userEntity.Roles ?? new List<string>(),
                    DeviceId = "web-browser", // ????? ?????????? ? headers
                    IpAddress = Request.HttpContext.Connection.RemoteIpAddress?.ToString() ?? "",
                    UserAgent = Request.Headers.UserAgent.ToString(),
                    SessionDuration = TimeSpan.FromHours(24), // ??????????????
                    Metadata = new Dictionary<string, object>
                    {
                        { "login_method", "email_password" },
                        { "user_state", userEntity.State }
                    }
                };

                var sessionToken = await _sessionManager.CreateSessionAsync(sessionRequest);

                // ???????????? HttpOnly cookie ?? ??????
                var cookieOptions = new CookieOptions
                {
                    HttpOnly = true,
                    Secure = Request.IsHttps,
                    SameSite = SameSiteMode.Strict,
                    Expires = sessionToken.AccessTokenExpiry, // ?????????????? expiry ? ??????
                    Path = "/"
                };
                Response.Cookies.Append("authToken", sessionToken.AccessToken, cookieOptions);

                _logger.LogInformation("?????????? {Email} ??????? ????????????? ? ????? ?????? {SessionId}", 
                    request.Email, sessionToken.SessionId);
                
                // ?? ???????: ?? ?????????? ?????? ? JSON ?????????
                result.Token = "stored_in_httponly_cookie";
                result.AccessToken = null;
                result.RefreshToken = null;
            }
        }

        return result.Success ? Ok(result) : BadRequest(result);
    }

    /// <summary>
    /// ????????? ENDPOINT /me ? ????????????? shared authentication
    /// ?????????? ??? ????????: ??????????? ?????????, ????? ? Redis, ???????
    /// </summary>
    [HttpGet("me")]
    [Authorize] // Shared middleware ??????????? ??????? ????? + ?????
    public async Task<ActionResult<UserInfo>> GetCurrentUser()
    {
        try
        {
            // ?? ??????? ???????????: ??????? shared authentication middleware
            // ????? ??? ??????????? ? User.Identity ?????????? ??????????? claims
            
            var userId = User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
            if (string.IsNullOrEmpty(userId) || !Guid.TryParse(userId, out var userGuid))
            {
                _logger.LogWarning("???????? ??? ????????? userId ? ??????");
                return Unauthorized(new { Message = "???????? ????? ???????????" });
            }

            // ?? ????????? ?????????: ????????? ????? ? Redis
            var sessionId = User.FindFirst("session_id")?.Value;
            if (!string.IsNullOrEmpty(sessionId))
            {
                var sessionValidation = await _sessionManager.ValidateSessionByIdAsync(sessionId);
                if (!sessionValidation.IsValid)
                {
                    _logger.LogWarning("????? {SessionId} ??? ??????????? {UserId} ????????: {Error}", 
                        sessionId, userId, sessionValidation.ErrorMessage);
                    
                    // ??????????? ????????? cookie ???? ????? ????????
                    Response.Cookies.Delete("authToken");
                    return Unauthorized(new { Message = "????? ???????? ??? ?????????" });
                }

                // ?? ??????????? ?????????: ???? ????? ????? ???????????
                if (sessionValidation.RequiresRefresh)
                {
                    await _sessionManager.RefreshSessionAsync(sessionId);
                    _logger.LogDebug("??????????? ?????????? ????? {SessionId}", sessionId);
                }
            }

            // ?? ????????? ?????????? ?????: ? ???? ?????
            var user = await _userRepository.GetByIdAsync(userGuid);
            if (user == null)
            {
                _logger.LogWarning("?????????? {UserId} ?? ????????? ? ???? ?????", userId);
                return NotFound(new { Message = "?????????? ?? ?????????" });
            }

            // ??? ????????? ???????: ????????? ???????
            if (user.State != "Active")
            {
                _logger.LogWarning("?????????? {UserId} ??? ?????????? ??????: {State}", userId, user.State);
                
                // ??????????? ????? ?? ????????? cookie
                if (!string.IsNullOrEmpty(sessionId))
                {
                    await _sessionManager.InvalidateSessionAsync(sessionId);
                }
                Response.Cookies.Delete("authToken");
                
                return Unauthorized(new { 
                    Message = user.State == "Pending" 
                        ? "???? ?????, ????????? ???? ????????? ????? ????? ?????????? ?????" 
                        : "????????? ????? ???????????" 
                });
            }

            // ?? ??????? ?????????
            var userInfo = new UserInfo
            {
                Id = user.Id,
                Name = user.Name,
                Surname = user.Surname,
                Email = user.Email,
                Roles = user.Roles ?? new List<string>()
            };

            // ?? ????????? ??????????
            _logger.LogDebug("????????? ?????????? ??? ??????????? {UserId}, ????? {SessionId}", 
                userId, sessionId);

            return Ok(userInfo);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "??????? ??? ????????? ?????????? ??? ????????? ???????????");
            return StatusCode(500, new { Message = "????????? ??????? ???????" });
        }
    }

    /// <summary>
    /// ????????? LOGOUT ? ????????????? shared session management
    /// </summary>
    [HttpPost("logout")]
    [Authorize]
    public async Task<IActionResult> Logout()
    {
        try
        {
            var userId = User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
            var sessionId = User.FindFirst("session_id")?.Value;

            if (!string.IsNullOrEmpty(sessionId))
            {
                // ??????????? ????? ? Redis
                await _sessionManager.InvalidateSessionAsync(sessionId);
                _logger.LogInformation("???????????? ????? {SessionId} ??? ??????????? {UserId}", sessionId, userId);
            }

            // ????????? HttpOnly cookie
            Response.Cookies.Delete("authToken");
            
            return Ok(new { Success = true, Message = "???????? ?????" });
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "??????? ??? ?????? ? ???????");
            return StatusCode(500, new { message = "????????? ??????? ???????" });
        }
    }

    /// <summary>
    /// ????? ENDPOINT: ????????? ???? ???????? ????? ???????????
    /// ???????????? ??????????? shared authentication library
    /// </summary>
    [HttpGet("sessions")]
    [Authorize]
    public async Task<IActionResult> GetMySessions()
    {
        try
        {
            var userIdClaim = User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
            if (!Guid.TryParse(userIdClaim, out var userId))
            {
                return BadRequest(new { message = "Invalid user ID" });
            }

            var sessions = await _sessionManager.GetUserSessionsAsync(userId);
            
            // ?????? ?? ?????????? DTO
            var sessionDtos = sessions.Select(s => new
            {
                s.Id,
                s.DeviceId,
                s.IpAddress,
                UserAgent = s.UserAgent?.Length > 50 ? s.UserAgent.Substring(0, 50) + "..." : s.UserAgent,
                s.CreatedAt,
                s.LastActivity,
                s.ExpiresAt,
                s.IsActive,
                IsCurrent = s.Id.ToString() == User.FindFirst("session_id")?.Value
            });

            return Ok(new { 
                Sessions = sessionDtos,
                TotalCount = sessions.Count,
                ActiveCount = sessions.Count(s => s.IsActive)
            });
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "??????? ??? ????????? ?????? ?????");
            return StatusCode(500, new { message = "????????? ??????? ???????" });
        }
    }

    /// <summary>
    /// ????? ENDPOINT: ??????????? ?????????? ?????
    /// </summary>
    [HttpPost("invalidate-session/{sessionId}")]
    [Authorize]
    public async Task<IActionResult> InvalidateSession(string sessionId)
    {
        try
        {
            var userIdClaim = User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
            if (!Guid.TryParse(userIdClaim, out var userId))
            {
                return BadRequest(new { message = "Invalid user ID" });
            }

            // ??????????? ?? ????? ???????? ????????? ???????????
            var sessions = await _sessionManager.GetUserSessionsAsync(userId);
            var session = sessions.FirstOrDefault(s => s.Id.ToString() == sessionId);
            
            if (session == null)
            {
                return NotFound(new { message = "Session not found" });
            }

            await _sessionManager.InvalidateSessionAsync(sessionId);
            
            _logger.LogInformation("?????????? {UserId} ??????????? ????? {SessionId}", userId, sessionId);
            
            return Ok(new { Success = true, Message = "Session invalidated" });
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "??????? ??? ??????????? ????? {SessionId}", sessionId);
            return StatusCode(500, new { message = "????????? ??????? ???????" });
        }
    }

    /// <summary>
    /// ????????? ENDPOINT: ????????? ?????? ? ????????????? shared library
    /// </summary>
    [HttpPost("validate")]
    public async Task<ActionResult> ValidateToken()
    {
        try
        {
            var token = GetTokenFromRequest();
            if (string.IsNullOrEmpty(token))
            {
                return Ok(new { Valid = false, Message = "????? ?? ????????" });
            }

            // ?????????????? shared service ??? ?????????
            var sessionValidation = await _sessionManager.ValidateSessionAsync(token);
            
            if (sessionValidation.IsValid && sessionValidation.Session != null)
            {
                return Ok(new { 
                    Valid = true, 
                    UserId = sessionValidation.Session.UserId,
                    SessionId = sessionValidation.Session.Id,
                    ExpiresAt = sessionValidation.Session.ExpiresAt,
                    RequiresRefresh = sessionValidation.RequiresRefresh,
                    Message = "????? ???????" 
                });
            }

            return Ok(new { 
                Valid = false, 
                Message = sessionValidation.ErrorMessage ?? "????? ?????????",
                IsExpired = sessionValidation.IsExpired
            });
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "??????? ??? ????????? ??????");
            return Ok(new { Valid = false, Message = "??????? ??? ????????? ??????" });
        }
    }

    /// <summary>
    /// ????????? CHANGE PASSWORD ? ???????????? ???? ?????
    /// </summary>
    [HttpPost("change-password")]
    [Authorize]
    public async Task<ActionResult<AuthResponse>> ChangePassword([FromBody] ChangePasswordRequest request)
    {
        try
        {
            var userId = User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
            if (string.IsNullOrEmpty(userId) || !Guid.TryParse(userId, out var userGuid))
            {
                return Unauthorized(new { Message = "???????? ????? ???????????" });
            }

            var result = await _usersService.ChangePasswordAsync(userGuid, request.CurrentPassword, request.NewPassword);
            
            if (result.Success)
            {
                // ?? ???????: ????? ????? ?????? ??????????? ??? ????? ???????????
                await _sessionManager.InvalidateAllUserSessionsAsync(userGuid);
                Response.Cookies.Delete("authToken");
                
                _logger.LogInformation("?????????? {UserId} ??????? ?????? ??????, ??? ????? ????????????", userId);
                
                return Ok(new AuthResponse
                {
                    Success = true,
                    Message = "?????? ???????. ???????? ????? ? ????? ???????."
                });
            }
            
            return BadRequest(result);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "??????? ??? ????? ??????");
            return StatusCode(500, new { message = "????????? ??????? ???????" });
        }
    }

    // ?????????? ????? ??? ????????? ??????
    private string GetTokenFromRequest()
    {
        // ????????? 1: HttpOnly cookie
        if (Request.Cookies.TryGetValue("authToken", out var cookieToken))
        {
            return cookieToken;
        }

        // ????????? 2: Authorization header
        if (Request.Headers.TryGetValue("Authorization", out var authHeader) && 
            authHeader.ToString().StartsWith("Bearer "))
        {
            return authHeader.ToString().Replace("Bearer ", "");
        }

        return string.Empty;
    }
}

/// <summary>
/// ??????????: ?????? ?????? VS ????? ??????
/// 
/// === ?????? ?????? (???????? AuthController) ===
/// ? ????? ????????? ?????? ? ??????? ?????????
/// ? ????? ???????????????? ?????????? ???????
/// ? ??????? ?????? ??????? JWT
/// ? ???? ????????????? ??????????? ???????
/// ? ????? ???????? ?????????? ?????
/// 
/// === ????? ?????? (AuthControllerWithSharedAuth) ===
/// ? ??????????? ????????? ????? shared middleware
/// ? ?????????????? ?????????? ??????? ? Redis
/// ? ??????????? ????????? ?????????? ?????
/// ? ???????? ????????? ?????????? ?????
/// ? Token revocation ????? blacklist
/// ? ???????? ????????? ?? ??????????
/// ? ???????? ????????? ????? ??????????
/// ? ??????????? ??????? ???????
/// ? Multi-device session management
/// ? ??????????? ??????????? ?????
/// ? ???????? ??????????? ??? ????? ??????
/// 
/// === ??????? ???????? ===
/// ?? ??????????????? - Redis distributed sessions
/// ?? ??????? - HttpOnly cookies + session validation
/// ??? ????????? ???????? - ???? ????? ??? ????????????
/// ?? ?????????? - ???????? ???? ???? ???
/// ?? ????????? - ????? ???????????? ????? ????????????
/// </summary>