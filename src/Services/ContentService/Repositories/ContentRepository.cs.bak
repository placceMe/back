using Microsoft.EntityFrameworkCore;
using ContentService.Data;
using ContentService.Models;

namespace ContentService.Repositories;

public class ContentRepository : IContentRepository
{
    private readonly ContentDbContext _context;

    public ContentRepository(ContentDbContext context)
    {
        _context = context;
    }

    public async Task<IEnumerable<Content>> GetAllAsync()
    {
        return await _context.Contents
            .OrderBy(c => c.Category)
            .ThenBy(c => c.Key)
            .ToListAsync();
    }

    public async Task<Content?> GetByIdAsync(int id)
    {
        return await _context.Contents.FindAsync(id);
    }

    public async Task<Content?> GetByKeyAsync(string key)
    {
        return await _context.Contents
            .FirstOrDefaultAsync(c => c.Key == key);
    }

    public async Task<IEnumerable<Content>> GetByCategoryAsync(string category)
    {
        return await _context.Contents
            .Where(c => c.Category == category)
            .OrderBy(c => c.Key)
            .ToListAsync();
    }

    public async Task<IEnumerable<Content>> GetActiveContentAsync()
    {
        return await _context.Contents
            .Where(c => c.IsActive)
            .OrderBy(c => c.Category)
            .ThenBy(c => c.Key)
            .ToListAsync();
    }

    public async Task<Content> CreateAsync(Content content)
    {
        content.CreatedAt = DateTime.UtcNow;
        content.UpdatedAt = DateTime.UtcNow;

        _context.Contents.Add(content);
        await _context.SaveChangesAsync();
        return content;
    }

    public async Task<Content> UpdateAsync(Content content)
    {
        content.UpdatedAt = DateTime.UtcNow;

        _context.Contents.Update(content);
        await _context.SaveChangesAsync();
        return content;
    }

    public async Task<bool> DeleteAsync(int id)
    {
        var content = await _context.Contents.FindAsync(id);
        if (content == null)
            return false;

        _context.Contents.Remove(content);
        await _context.SaveChangesAsync();
        return true;
    }

    public async Task<bool> ExistsAsync(string key)
    {
        return await _context.Contents.AnyAsync(c => c.Key == key);
    }
}
