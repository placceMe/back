using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Authorization;
using OrdersServiceNet.DTOs;
using OrdersServiceNet.Services;
using System.Security.Claims;

namespace OrdersServiceNet.Controllers;

[ApiController]
[Route("api/[controller]")]
[Authorize] // ?? ??? ????????? ?????????? ?????????? ???????????
public class OrdersController : ControllerBase
{
    private readonly IOrderService _orderService;
    private readonly ILogger<OrdersController> _logger;

    public OrdersController(IOrderService orderService, ILogger<OrdersController> logger)
    {
        _orderService = orderService;
        _logger = logger;
    }

    /// <summary>
    /// ???????? ???? ?????????? (?????? ???????????? ???????????)
    /// </summary>
    [HttpPost]
    public async Task<ActionResult<OrderResponse>> CreateOrder(CreateOrderRequest request)
    {
        try
        {
            // ?? ????????? ID ????????? ??????????? ? JWT ??????
            var currentUserId = User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
            if (string.IsNullOrEmpty(currentUserId) || !Guid.TryParse(currentUserId, out var userGuid))
            {
                _logger.LogWarning("?????? ???????? ?????????? ??? ????????? userId ? ??????");
                return Unauthorized(new { message = "???????? ????? ???????????" });
            }

            // ??? ???????: ??????????? ?? ?????????? ??????? ?????????? ??? ????
            if (request.UserId != userGuid)
            {
                _logger.LogWarning("?????????? {CurrentUserId} ??????????? ???????? ?????????? ??? {RequestUserId}", 
                    currentUserId, request.UserId);
                return Forbid("?? ?????? ?????????? ?????????? ?????? ??? ????");
            }

            var order = await _orderService.CreateOrderAsync(request);
            
            _logger.LogInformation("?????????? {UserId} ??????? ?????????? {OrderId}", 
                currentUserId, order.Id);
            
            return CreatedAtAction(nameof(GetOrder), new { id = order.Id }, order);
        }
        catch (ArgumentException ex)
        {
            _logger.LogWarning("??????? ???? ??? ????????? ??????????: {Error}", ex.Message);
            return BadRequest(ex.Message);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "??????? ??? ????????? ??????????");
            return StatusCode(500, "Internal server error");
        }
    }

    /// <summary>
    /// ???????? ?????????? ?? ID (?????? ??????? ??? ?????)
    /// </summary>
    [HttpGet("{id}")]
    public async Task<ActionResult<OrderResponse>> GetOrder(Guid id)
    {
        try
        {
            var order = await _orderService.GetOrderByIdAsync(id);
            if (order == null)
            {
                return NotFound();
            }

            // ?? ??????????? ????? ???????
            var currentUserId = User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
            var userRoles = User.FindAll(ClaimTypes.Role).Select(c => c.Value).ToList();
            
            // ?????????? ?????? ???????? ?????????? ??? ???????????????
            if (order.UserId.ToString() != currentUserId && !userRoles.Contains("Admin"))
            {
                _logger.LogWarning("?????????? {UserId} ??????????? ???????? ?????? ?? ?????? ?????????? {OrderId}", 
                    currentUserId, id);
                return Forbid("?? ?????? ??????????? ?????? ???? ??????????");
            }

            return Ok(order);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "??????? ??? ????????? ?????????? {OrderId}", id);
            return StatusCode(500, "Internal server error");
        }
    }

    /// <summary>
    /// ???????? ?????????? ??????????? (?????? ???? ??????????)
    /// </summary>
    [HttpGet("user/{userId}")]
    public async Task<ActionResult<IEnumerable<OrderResponse>>> GetOrdersByUser(Guid userId)
    {
        try
        {
            var currentUserId = User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
            var userRoles = User.FindAll(ClaimTypes.Role).Select(c => c.Value).ToList();

            // ?? ??????????? ????? ???????
            if (userId.ToString() != currentUserId && !userRoles.Contains("Admin"))
            {
                _logger.LogWarning("?????????? {CurrentUserId} ??????????? ???????? ?????????? ??????????? {RequestedUserId}", 
                    currentUserId, userId);
                return Forbid("?? ?????? ??????????? ?????? ???? ??????????");
            }

            var orders = await _orderService.GetOrdersByUserIdAsync(userId);
            return Ok(orders);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "??????? ??? ????????? ????????? ??????????? {UserId}", userId);
            return StatusCode(500, "Internal server error");
        }
    }

    /// <summary>
    /// ???????? ??? ?????????? (??????? ????????)
    /// </summary>
    [HttpGet("my")]
    public async Task<ActionResult<IEnumerable<OrderResponse>>> GetMyOrders()
    {
        try
        {
            var currentUserId = User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
            if (string.IsNullOrEmpty(currentUserId) || !Guid.TryParse(currentUserId, out var userGuid))
            {
                return Unauthorized(new { message = "???????? ????? ???????????" });
            }

            var orders = await _orderService.GetOrdersByUserIdAsync(userGuid);
            
            _logger.LogDebug("????????? {Count} ????????? ??? ??????????? {UserId}", 
                orders.Count(), currentUserId);
            
            return Ok(orders);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "??????? ??? ????????? ????????? ????????? ???????????");
            return StatusCode(500, "Internal server error");
        }
    }

    /// <summary>
    /// ???????? ??? ?????????? (?????? ??????????????)
    /// </summary>
    [HttpGet]
    [Authorize(Roles = "Admin")] // ?? ?????? ??????????????
    public async Task<ActionResult<IEnumerable<OrderResponse>>> GetAllOrders()
    {
        try
        {
            var orders = await _orderService.GetAllOrdersAsync();
            
            var currentUserId = User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
            _logger.LogInformation("????????????? {UserId} ???????? ??? ??????????, ????????? {Count} ???????", 
                currentUserId, orders.Count());
            
            return Ok(orders);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "??????? ??? ????????? ???? ?????????");
            return StatusCode(500, "Internal server error");
        }
    }

    /// <summary>
    /// ??????????? ?????????? (?????? ?????????????? ??? ????????)
    /// </summary>
    [HttpPut("{id}/confirm")]
    public async Task<ActionResult<OrderResponse>> ConfirmOrder(Guid id)
    {
        try
        {
            // ???????? ????????? ?????????? ??? ????????? ????
            var existingOrder = await _orderService.GetOrderByIdAsync(id);
            if (existingOrder == null)
            {
                return NotFound();
            }

            var currentUserId = User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
            var userRoles = User.FindAll(ClaimTypes.Role).Select(c => c.Value).ToList();

            // ?? ??????????? ?????: ??????? ?????????? ??? ?????
            if (existingOrder.UserId.ToString() != currentUserId && !userRoles.Contains("Admin"))
            {
                _logger.LogWarning("?????????? {UserId} ??????????? ??????????? ???? ?????????? {OrderId}", 
                    currentUserId, id);
                return Forbid("?? ?????? ?????????????? ?????? ???? ??????????");
            }

            var order = await _orderService.ConfirmOrderAsync(id);
            
            _logger.LogInformation("?????????? {OrderId} ???????????? ???????????? {UserId}", id, currentUserId);
            
            return order != null ? Ok(order) : NotFound();
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "??????? ??? ????????????? ?????????? {OrderId}", id);
            return StatusCode(500, "Internal server error");
        }
    }

    /// <summary>
    /// ????????? ?????????? (?????? ?????????????? ??? ????????)
    /// </summary>
    [HttpPut("{id}/reject")]
    public async Task<ActionResult<OrderResponse>> RejectOrder(Guid id)
    {
        try
        {
            // ???????? ????????? ?????????? ??? ????????? ????
            var existingOrder = await _orderService.GetOrderByIdAsync(id);
            if (existingOrder == null)
            {
                return NotFound();
            }

            var currentUserId = User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
            var userRoles = User.FindAll(ClaimTypes.Role).Select(c => c.Value).ToList();

            // ?? ??????????? ?????: ??????? ?????????? ??? ?????
            if (existingOrder.UserId.ToString() != currentUserId && !userRoles.Contains("Admin"))
            {
                _logger.LogWarning("?????????? {UserId} ??????????? ????????? ???? ?????????? {OrderId}", 
                    currentUserId, id);
                return Forbid("?? ?????? ????????? ?????? ???? ??????????");
            }

            var order = await _orderService.RejectOrderAsync(id);
            
            _logger.LogInformation("?????????? {OrderId} ????????? ???????????? {UserId}", id, currentUserId);
            
            return order != null ? Ok(order) : NotFound();
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "??????? ??? ?????????? ?????????? {OrderId}", id);
            return StatusCode(500, "Internal server error");
        }
    }

    /// <summary>
    /// ???????? ?????????? (?????? ??????????????)
    /// </summary>
    [HttpDelete("{id}")]
    [Authorize(Roles = "Admin")] // ?? ?????? ?????????????? ?????? ????????
    public async Task<ActionResult> DeleteOrder(Guid id)
    {
        try
        {
            var success = await _orderService.DeleteOrderAsync(id);
            
            if (success)
            {
                var currentUserId = User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
                _logger.LogInformation("?????????? {OrderId} ???????? ??????????????? {UserId}", id, currentUserId);
                return NoContent();
            }
            
            return NotFound();
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "??????? ??? ????????? ?????????? {OrderId}", id);
            return StatusCode(500, "Internal server error");
        }
    }
}

/// <summary>
/// Health check ????????? (????????? ??????)
/// </summary>
[ApiController]
[Route("[controller]")]
public class HealthController : ControllerBase
{
    [HttpGet]
    [AllowAnonymous] // ?? ????????? ?????? ??? ???????????
    public ActionResult Get()
    {
        return Ok(new { status = "healthy", service = "OrdersServiceNet", timestamp = DateTime.UtcNow });
    }
}