services:
  users-service:
    build: ./src/Services/UsersService
    container_name: users-service
    ports:
      - "5002:80"
    environment:
      - ASPNETCORE_HTTP_PORTS=80
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://+:80
      - ConnectionStrings__DefaultConnection=Host=postgres-db;Port=5432;Database=marketplace_db;Username=marketplace;Password=marketplace_password;Search Path=users_service;
      - ConnectionStrings__Redis=redis:6379
      - ALLOWED_ORIGINS=http://localhost:5173
    depends_on:
      postgres-db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: on-failure
    networks:
      - app-network

  nginx-gateway:
    image: nginx:latest
    container_name: nginx-gateway
    ports:
      - "8080:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    # depends_on:
    #   - users-service
    #   - products-service
    #   - files-service
    networks:
      - app-network

  products-service:
    build:
      context: ./src/Services/ProductsService
    container_name: products-service
    ports:
      - "5003:80"
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://+:80
      - ConnectionStrings__DefaultConnection=Host=postgres-db;Port=5432;Database=marketplace_db;Username=marketplace;Password=marketplace_password;Search Path=products_service;
      - FilesService__BaseUrl=http://files-service:80/
      - ALLOWED_ORIGINS=http://localhost:5173
    depends_on:
      postgres-db:
        condition: service_healthy
      files-service:
        condition: service_started
    restart: on-failure
    networks:
      - app-network

  files-service:
    build:
      context: ./src/Services/FilesService
      dockerfile: Dockerfile
    container_name: files-service
    ports:
      - "5001:80"
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://+:80
      - ASPNETCORE_HTTP_PORTS=80
      - MinIO__Endpoint=minio:9000
      - MinIO__AccessKey=minioadmin
      - MinIO__SecretKey=minioadmin123
      - MinIO__BucketName=images
      - MinIO__Secure=false
      - ALLOWED_ORIGINS=http://localhost:5173
    depends_on:
      - minio
    networks:
      - app-network

  orders-service:
    build:
      context: ./src/Services/OrdersServiceNet
      dockerfile: Dockerfile
    container_name: orders-service
    ports:
      - "5004:80"
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://+:80
      - ConnectionStrings__DefaultConnection=Host=postgres-db;Port=5432;Database=marketplace_db;Username=marketplace;Password=marketplace_password;Search Path=orders_service;
      - ProductsService__BaseUrl=http://products-service:80/
      - UsersService__BaseUrl=http://users-service:80/
      - ALLOWED_ORIGINS=http://localhost:5173
    depends_on:
      postgres-db:
        condition: service_healthy
      products-service:
        condition: service_started
      users-service:
        condition: service_started
    restart: on-failure
    networks:
      - app-network

  postgres-db:
    image: postgres:16
    container_name: postgres-db
    restart: always
    environment:
      POSTGRES_USER: marketplace
      POSTGRES_PASSWORD: marketplace_password
      POSTGRES_DB: marketplace_db
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U marketplace -d marketplace_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network
      
  minio:
    image: minio/minio:latest
    container_name: minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

volumes:
  minio_data:
  postgres_data:
  redis_data:

networks:
  app-network:
    driver: bridge