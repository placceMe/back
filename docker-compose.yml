services:
  postgres-db:
    image: postgres:16
    container_name: postgres-db
    restart: always
    environment:
      POSTGRES_USER: marketplace
      POSTGRES_PASSWORD: marketplace_password
      POSTGRES_DB: marketplace_db
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U marketplace -d marketplace_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  minio:
    image: minio/minio:latest
    container_name: minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  mailhog:
    container_name: mailhog
    image: mailhog/mailhog:latest
    ports:
      - "8025:8025"   # UI
      - "1025:1025"   # SMTP
    restart: unless-stopped
    networks:
      - app-network

  # Marketplace Services
  users-service:
    build:
      context: .
      dockerfile: src/Services/UsersService/Dockerfile
    container_name: users-service
    ports:
      - "5002:80"
    environment:
      - ASPNETCORE_HTTP_PORTS=80
      - ASPNETCORE_ENVIRONMENT=${ENVIRONMENT:-Production}
      - ASPNETCORE_URLS=http://+:80
      - ConnectionStrings__DefaultConnection=Host=${DB_HOST:-postgres-db};Port=5432;Database=marketplace_db;Username=marketplace;Password=marketplace_password;Search Path=users_service;
      - ConnectionStrings__Redis=${REDIS_HOST:-redis}:6379
      - ALLOWED_ORIGINS=${FRONTEND_URL:-http://localhost:5173}
      - NotificationsService__BaseUrl=${NOTIFICATIONS_SERVICE_URL:-http://notifications-service:8080/}
      - Frontend__BaseUrl=${FRONTEND_URL:-http://frontend:80/}
    depends_on:
      postgres-db:
        condition: service_healthy
      redis:
        condition: service_healthy
      notifications-service:
        condition: service_started
    restart: on-failure
    networks:
      - app-network

  products-service:
    build:
      context: .
      dockerfile: src/Services/ProductsService/Dockerfile
    container_name: products-service
    ports:
      - "5003:80"
    environment:
      - ASPNETCORE_ENVIRONMENT=${ENVIRONMENT:-Production}
      - ASPNETCORE_URLS=http://+:80
      - ConnectionStrings__DefaultConnection=Host=${DB_HOST:-postgres-db};Port=5432;Database=marketplace_db;Username=marketplace;Password=marketplace_password;Search Path=products_service;
      - FilesService__BaseUrl=${FILES_SERVICE_URL:-http://files-service:80/}
      - ALLOWED_ORIGINS=${FRONTEND_URL:-http://localhost:5173}
    depends_on:
      postgres-db:
        condition: service_healthy
      files-service:
        condition: service_started
    restart: on-failure
    networks:
      - app-network

  files-service:
    build:
      context: .
      dockerfile: src/Services/FilesService/Dockerfile
    container_name: files-service
    ports:
      - "5001:80"
    environment:
      - ASPNETCORE_ENVIRONMENT=${ENVIRONMENT:-Production}
      - ASPNETCORE_URLS=http://+:80
      - ASPNETCORE_HTTP_PORTS=80
      - MinIO__Endpoint=${MINIO_HOST:-minio}:9000
      - MinIO__AccessKey=minioadmin
      - MinIO__SecretKey=minioadmin123
      - MinIO__BucketName=images
      - MinIO__Secure=false
      - ALLOWED_ORIGINS=${FRONTEND_URL:-http://localhost:5173}
    depends_on:
      - minio
    networks:
      - app-network

  chat-service:
    build:
      context: .
      dockerfile: src/Services/ChatService/Dockerfile
    container_name: chat-service
    ports:
      - "5005:80"
    environment:
      - ASPNETCORE_ENVIRONMENT=${ENVIRONMENT:-Production}
      - ASPNETCORE_URLS=http://+:80
      - ConnectionStrings__DefaultConnection=Host=${DB_HOST:-postgres-db};Port=5432;Database=marketplace_db;Username=marketplace;Password=marketplace_password;Search Path=chat_service;
      - UsersService__BaseUrl=${USERS_SERVICE_URL:-http://users-service:80/}
      - ProductsService__BaseUrl=${PRODUCTS_SERVICE_URL:-http://products-service:80/}
      - Cors__AllowedOrigins__0=${FRONTEND_URL:-http://localhost:5173}
      - Cors__AllowedOrigins__1=http://localhost:3000
      - Cors__AllowedOrigins__2=http://localhost:8080
    depends_on:
      postgres-db:
        condition: service_healthy
      users-service:
        condition: service_started
      products-service:
        condition: service_started
    restart: on-failure
    networks:
      - app-network

  content-service:
    build:
      context: .
      dockerfile: src/Services/ContentService/Dockerfile
    container_name: content-service
    ports:
      - "5006:80"
    environment:
      - ASPNETCORE_ENVIRONMENT=${ENVIRONMENT:-Production}
      - ASPNETCORE_URLS=http://+:80
      - ConnectionStrings__DefaultConnection=Host=${DB_HOST:-postgres-db};Port=5432;Database=marketplace_db;Username=marketplace;Password=marketplace_password;Search Path=content_service;
      - ALLOWED_ORIGINS=${FRONTEND_URL:-http://localhost:5173}
    depends_on:
      postgres-db:
        condition: service_healthy
    restart: on-failure
    networks:
      - app-network

  orders-service:
    build:
      context: .
      dockerfile: src/Services/OrdersServiceNet/Dockerfile
    container_name: orders-service
    ports:
      - "5004:80"
    environment:
      - ASPNETCORE_ENVIRONMENT=${ENVIRONMENT:-Production}
      - ASPNETCORE_URLS=http://+:80
      - ConnectionStrings__DefaultConnection=Host=${DB_HOST:-postgres-db};Port=5432;Database=marketplace_db;Username=marketplace;Password=marketplace_password;Search Path=orders_service;
      - ConnectionStrings__Redis=${REDIS_HOST:-redis}:6379
      - ProductsService__BaseUrl=${PRODUCTS_SERVICE_URL:-http://products-service:80/}
      - UsersService__BaseUrl=${USERS_SERVICE_URL:-http://users-service:80/}
      - NotificationsService__BaseUrl=${NOTIFICATIONS_SERVICE_URL:-http://notifications-service:8080/}
      - ALLOWED_ORIGINS=${FRONTEND_URL:-http://localhost:5173}
    depends_on:
      postgres-db:
        condition: service_healthy
      redis:
        condition: service_healthy
      products-service:
        condition: service_started
      users-service:
        condition: service_started
      notifications-service:
        condition: service_started
    restart: on-failure
    networks:
      - app-network

  notifications-service:
    build:
      context: .
      dockerfile: src/Services/NotificationsService/Dockerfile
    container_name: notifications-service
    environment:
      ASPNETCORE_ENVIRONMENT: ${ENVIRONMENT:-Production}
      ASPNETCORE_URLS: http://+:8080
      Email__Provider: Smtp
      Email__FromName: "Marketplace"
      Email__FromAddress: "no-reply@marketplace.local"
      Email__Smtp__Host: ${MAILHOG_HOST:-mailhog}
      Email__Smtp__Port: 1025
      Email__Smtp__UseSsl: "false"
    ports:
      - "5007:8080"
    depends_on:
      - mailhog
    restart: unless-stopped
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "wget --quiet --tries=1 --spider http://localhost:8080/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # api-gateway:
  #   build:
  #     context: .
  #     dockerfile: src/ApiGateway/Dockerfile
  #   container_name: api-gateway
  #   ports:
  #     - "5000:80"
  #   environment:
  #     - ASPNETCORE_ENVIRONMENT=${ENVIRONMENT:-Production}
  #     - ASPNETCORE_URLS=http://+:80
  #     - UsersService__BaseUrl=http://users-service:80/
  #     - ProductsService__BaseUrl=http://products-service:80/
  #     - FilesService__BaseUrl=http://files-service:80/
  #     - ChatService__BaseUrl=http://chat-service:80/
  #     - OrdersService__BaseUrl=http://orders-service:80/
  #     - ContentService__BaseUrl=http://content-service:80/
  #     - NotificationsService__BaseUrl=http://notifications-service:8080/
  #   depends_on:
  #     - users-service
  #     - products-service
  #     - files-service
  #     - chat-service
  #     - orders-service
  #     - content-service
  #     - notifications-service
  #   restart: on-failure
  #   networks:
  #     - app-network

  nginx-gateway:
    image: nginx:latest
    container_name: nginx-gateway
    ports:
      - "8080:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    restart: on-failure
    # depends_on:
      # - api-gateway
    networks:
      - app-network

volumes:
  minio_data:
  postgres_data:
  redis_data:

networks:
  app-network:
    driver: bridge